
node {
    // def defaultJenkinsfile = load 'Jenkinsfile'

    build_number = env.BUILD_NUMBER
    workspace = env.WORKSPACE
    ws("${workspace}/${build_number}") {
        def git_project = params.GIT_PROJECT
        def current_branch = params.CURRENT_BRANCH
        def default_branch = params.DEFAULT_BRANCH
        def image_registry = params.IMAGE_REGISTRY
        def version = params.IMAGE_VERSION

        stage('Debug') {
            sh 'ls'
            sh 'pwd'
            env.PATH = "${env.PATH}:/usr/local/go/bin"
            env.HARBOR_USERNAME = ''
            env.HARBOR_PASSWORD = ''
            sh 'printenv'
            sh 'who'
            sh 'which go'
            sh 'go version'
        }
        stage('Clone/Checkout') {
            git branch: default_branch, url: git_project
            checkout([
                $class: 'GitSCM',
                branches: [[name: current_branch]],
                extensions: [],
                userRemoteConfigs: [[
                    refspec: '+refs/pull/*/head:refs/remotes/origin/pr/*',
                    url: git_project
                ]]
            ])
            sh 'git show'
        }
        stage('Grype') {
            sh "make grype VERSION=${version} REGISTRY=${image_registry}"
        }
        stage('Nancy') {
            sh 'make nancy'
        }
        stage('Trivy') {
            sh "make trivy VERSION=${version} REGISTRY=${image_registry}"
        }
        stage('Parse') {
            sh './hack/parse_security_scan.sh'
        }
        // stage('Debug') {
        //     sh 'printenv'
        //     sh 'mkdir _output'

        //     sh 'echo grype > _output/grype.json'
        //     sh 'echo nancy > _output/nancy.json'
        //     sh 'echo trivi > _output/trivy.json'

        //     sh 'echo "./_output/grype_base-image_latest.json" >> _output/report.txt'
        //     sh 'echo "CVE-2015-5237   High    google.golang.org/protobuf  github.com/grpc-ecosystem/grpc-health-probe" >> _output/report.txt'
        //     sh 'echo "CVE-2021-22570  Medium  google.golang.org/protobuf  github.com/grpc-ecosystem/grpc-health-probe" >> _output/report.txt'
        //     sh 'echo "" >> _output/report.txt'
        //     sh 'echo "./_output/grype_frontend_latest.json" >> _output/report.txt'
        //     sh 'echo "CVE-2015-5237   High    google.golang.org/protobuf  github.com/grpc-ecosystem/grpc-health-probe" >> _output/report.txt'
        //     sh 'echo "CVE-2015-5237   High    google.golang.org/protobuf  github.com/nordix/meridio" >> _output/report.txt'
        //     sh 'echo "CVE-2021-22570  Medium  google.golang.org/protobuf  github.com/grpc-ecosystem/grpc-health-probe" >> _output/report.txt'
        //     sh 'echo "CVE-2021-22570  Medium  google.golang.org/protobuf  github.com/nordix/meridio" >> _output/report.txt'

        //     sh 'echo "CVE-2015-5237   High    google.golang.org/protobuf  github.com/grpc-ecosystem/grpc-health-probe" >> _output/list.txt'
        //     sh 'echo "CVE-2021-22570  Medium  google.golang.org/protobuf  github.com/grpc-ecosystem/grpc-health-probe" >> _output/list.txt'
        //     sh 'echo "CVE-2015-5237   High    google.golang.org/protobuf  github.com/grpc-ecosystem/grpc-health-probe" >> _output/list.txt'
        //     sh 'echo "CVE-2015-5240   High    google.golang.org/protobuf  github.com/nordix/meridio" >> _output/list.txt'
        //     sh 'echo "CVE-2021-22570  Medium  google.golang.org/protobuf  github.com/grpc-ecosystem/grpc-health-probe" >> _output/list.txt'
        //     sh 'echo "CVE-2021-22570  Medium  google.golang.org/protobuf  github.com/nordix/meridio" >> _output/list.txt'
        // }
        stage('Mail') {
            archiveArtifacts artifacts: '_output/*', followSymlinks: false

            def number_of_cves =  sh(script: 'cat _output/list.txt | grep -v "^$" | awk \'{print $1}\' | sort | uniq | wc -l', returnStdout: true).trim()
            def list_of_cves =  sh(script: 'cat _output/list.txt | grep -v "^$" | awk \'{print $1}\' | sort | uniq | sed \':a;N;$!ba;s/\\n/ ; /g\'', returnStdout: true).trim()
            def number_of_high_severity_cves =  sh(script: 'cat _output/list.txt | grep -v "^$" | grep -i "high" | awk \'{print $1}\' | sort | uniq | wc -l', returnStdout: true).trim()
            def list_of_high_severity_cves =  sh(script: 'cat _output/list.txt | grep -v "^$" | grep -i "high" | awk \'{print $1}\' | sort | uniq | sed \':a;N;$!ba;s/\\n/ ; /g\'', returnStdout: true).trim()
            def git_describe =  sh(script: 'git describe --dirty --tags', returnStdout: true).trim()
            def git_rev =  sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
            def report =  sh(script: 'cat _output/report.txt', returnStdout: true).trim()

            def subject = "Meridio - Security Scan - ${number_of_high_severity_cves} high severity CVEs detected"
            def body = """
Run: ${RUN_DISPLAY_URL}
git describe --dirty --tags: ${git_describe}
git rev-parse HEAD: ${git_rev}
Image registry: ${image_registry}
Image Version: ${version}

Number of CVEs: ${number_of_cves}
List of CVEs: ${list_of_cves}

Number of CVEs with high severity: ${number_of_high_severity_cves}
List of CVEs with high severity: ${list_of_high_severity_cves}

report:
${report}
"""
            emailext body: "${body}", subject: "${subject}", to: 'lionel.jouin@est.tech'
        }
        stage('Cleanup') {
            echo 'Cleanup'
        // defaultJenkinsfile.Cleanup()
        }
    }
}
